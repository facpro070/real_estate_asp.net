version: '3.4'

networks:
  backend:
    driver: bridge

services:
# API GATEWAY
  apigateway:
    container_name: apigateway
    environment:
       - ASPNETCORE_ENVIRONMENT=Development
       - "ElasticConfiguration:Uri=http://elasticsearch:9200"
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: RealEstate.ApiGateway/Dockerfile
    ports:
      - 8000:80
    networks: 
      - backend 
    depends_on:
      - estateswebapi
      - listingswebapi
      - clientswebapi
      - contractswebapi

# ESTATE MICROSERVICE
  estateswebapi:
    container_name: estateswebapi
    image: ${DOCKER_REGISTRY-}estateswebapi
    build:
      context: .
      dockerfile: Microservices/EstatesMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 8001:80
    environment: 
      - DB_HOST=estatedb
      - DB_NAME=estates
      - DB_ROOT_PASSWORD=admin
    depends_on:
      - estatesdb

  estatesdb:
    container_name: estatesdb
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_DB=EstatesDB
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    ports:
      - '5010:5010'

# LISTING MICROSERVICE
  listingswebapi:
    container_name: listingswebapi
    image: ${DOCKER_REGISTRY-}listingswebapi
    build:
      context: .
      dockerfile: Microservices/ListingsMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 8002:80
    environment: 
      - DB_HOST=listingdb
      - DB_NAME=listings
      - DB_ROOT_PASSWORD=admin
    depends_on:
      - listingsdb
  
  listingsdb:
    container_name: listingsdb
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_DB=ListingsDB
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    ports:
      - '5011:5011'

# CLIENTS MICROSERVICE
  clientswebapi:
    container_name: clientswebapi
    image: ${DOCKER_REGISTRY-}clientswebapi
    build:
      context: .
      dockerfile: Microservices/ClientsMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 8003:80
    environment: 
      - DB_HOST=clientsdb
      - DB_NAME=clients
      - DB_ROOT_PASSWORD=admin
    depends_on:
      - clientsdb
  
  clientsdb:
    container_name: clientsdb
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_DB=ClientsDB
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    ports:
      - '5012:5012'

# CONTRACTS MICROSERVICE
  contractswebapi:
    container_name: contractswebapi
    image: ${DOCKER_REGISTRY-}contractswebapi
    build:
      context: .
      dockerfile: Microservices/ContractsMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 8004:80
    environment: 
      - DB_HOST=contractsdb
      - DB_NAME=contracts
      - DB_ROOT_PASSWORD=admin
    depends_on:
      - contractsdb

  contractsdb:
    container_name: contractsdb
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_DB=ContractsDB
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    ports:
      - '5013:5013'

# IDENTITY DB - Might be migrating to Keycloak?
  identitydb:
    container_name: identitydb
    image: postgres:14.1-alpine
    restart: always
    networks:
      - backend
    environment:
      - POSTGRES_DB=IdentityDB
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    ports:
      - '5014:5014'

# UTILITIES:
  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
        - "5672:5672"
        - "15672:15672"

  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@aspnetrun.com
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    ports:
        - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin

  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8080:8000"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

#Redis
  messagedb:
    container_name: messagedb
    restart: always    
    ports:
        - "6379:6379"

#Logging stack:
  elasticsearch:
    container_name: elasticsearch
    environment:
        - xpack.monitoring.enabled=true
        - xpack.watcher.enabled=false
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        - discovery.type=single-node
    ports:
        - "9200:9200"
    volumes:
        - elasticsearch-data:/usr/share/elasticsearch/data   

  kibana:
    container_name: kibana
    environment:        
        - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
        - elasticsearch
    ports:
        - "5601:5601"  