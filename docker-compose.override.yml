version: '3.4'

networks:
  backend:
    driver: bridge

services:
# API GATEWAY
  apigateway:
    container_name: apigateway
    environment:
       - ASPNETCORE_ENVIRONMENT=Development
       - "ElasticConfiguration:Uri=http://elasticsearch:9200"
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: RealEstate.ApiGateway/Dockerfile
    ports:
      - 8000:80
    networks: 
      - backend 
    depends_on:
      - estateswebapi
      - listingswebapi
      - clientswebapi
      - contractswebapi


# MICROSERVICES
# Estates Microservice
  estateswebapi:
    container_name: estateswebapi
    image: ${DOCKER_REGISTRY-}estateswebapi
    build:
      context: .
      dockerfile: Microservices/EstatesMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 8001:80
    depends_on:
      - db.postgresql

# Listings Microservice
  listingswebapi:
    container_name: listingswebapi
    image: ${DOCKER_REGISTRY-}listingswebapi
    build:
      context: .
      dockerfile: Microservices/ListingsMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 8002:80
    depends_on:
      - db.postgresql
  
# Clients Microservice
  clientswebapi:
    container_name: clientswebapi
    image: ${DOCKER_REGISTRY-}clientswebapi
    build:
      context: .
      dockerfile: Microservices/ClientsMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 8003:80
    depends_on:
      - db.postgresql
  
# Contracts Microservice
  contractswebapi:
    container_name: contractswebapi
    image: ${DOCKER_REGISTRY-}contractswebapi
    build:
      context: .
      dockerfile: Microservices/ContractsMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 8004:80
    depends_on:
      - db.postgresql


# DATABASES: PostgreSQL + Keycloak + Redis
  db.postgresql:
    container_name: db.postgresql
    image: postgres:13.3
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
    environment:
      POSTGRES_DB: "keycloak"
      POSTGRES_USER: "keycloak"
      POSTGRES_PASSWORD: "password"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ../2. Init Database:/docker-entrypoint-initdb.d
      - .:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:16.1.1
    volumes:
      - ./keycloak/imports:/keycloak/imports
    environment:
      KEYCLOAK_LOGLEVEL: DEBUG
      ROOT_LOGLEVEL: DEBUG
      KEYCLOAK_IMPORT: /keycloak/imports/realm-export.json
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      # KEYCLOAK_FRONTEND_URL: http://keycloak.local.dev
    ports:
      - 8080:8080
    depends_on:
      - database
    networks:
      - net_nginx
      - net_postgres

  db.messages:
    container_name: db.messages
    restart: always    
    ports:
      - "6379:6379"


# UTILITIES:
  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
        - "5672:5672"
        - "15672:15672"

  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    ports:
        - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin

  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8080:8000"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data


#Logging stack:
  elasticsearch:
    container_name: elasticsearch
    environment:
        - xpack.monitoring.enabled=true
        - xpack.watcher.enabled=false
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        - discovery.type=single-node
    ports:
        - "9200:9200"
    volumes:
        - elasticsearch-data:/usr/share/elasticsearch/data   

  kibana:
    container_name: kibana
    environment:        
        - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
        - elasticsearch
    ports:
        - "5601:5601"  

























## MicroDatabases: Not keeping the MicroDBs / consolidating them into one
#  db.estates:
#    container_name: db.estates
#    image: postgres:14.1-alpine
#    restart: always
#    environment:
#      - POSTGRES_DB=EstatesDB
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=admin
#    ports:
#      - '5010:5010'

#  db.contracts:
#    container_name: db.ontracts
#    image: postgres:14.1-alpine
#    restart: always
#    environment:
#      - POSTGRES_DB=ContractsDB
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=admin
#    ports:
#      - '5013:5013'

#  db.clients:
#    container_name: db.clients
#    image: postgres:14.1-alpine
#    restart: always
#    environment:
#      - POSTGRES_DB=ClientsDB
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=admin
#    ports:
#      - '5012:5012'

#  db.listings:
#    container_name: db.listings
#    image: postgres:14.1-alpine
#    restart: always
#    environment:
#      - POSTGRES_DB=ListingsDB
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=admin
#    ports:
#      - '5011:5011'

#  db.identity:
#    container_name: db.identity
#    image: postgres:14.1-alpine
#    restart: always
#    networks:
#      - backend
#    environment:
#      - POSTGRES_DB=IdentityDB
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=admin
#    ports:
#      - '5014:5014'
