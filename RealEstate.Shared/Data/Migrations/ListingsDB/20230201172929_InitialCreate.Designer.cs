// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealEstate.Shared.Data.Context;

#nullable disable

namespace RealEstate.Data.Migrations.ListingsDB
{
    [DbContext(typeof(ListingsDBContext))]
    [Migration("20230201172929_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("IdentityRole");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Clients.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUser_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Client_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contact_Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Contact_Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Employee_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Estate_Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Client_Id")
                        .IsUnique();

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Contracts.Contract", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Agent_Id")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Client_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contract_Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Contract_Type_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date_Signed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Employee_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Fee_Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Fee_Percentage")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number_Of_Invoices")
                        .HasColumnType("integer");

                    b.Property<decimal>("Payment_Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("Payment_Frequency_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Transaction_Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Agent_Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Estates.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EstateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Estate_Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Estates.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("Country_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Estates.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Estates.Estate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Balconies_Space")
                        .HasColumnType("numeric");

                    b.Property<string>("Build_Material")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Bulding_Floors")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("City_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Company_Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Employee_Id")
                        .HasColumnType("text");

                    b.Property<string>("Estate_Description")
                        .HasColumnType("text");

                    b.Property<string>("Estate_ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Estate_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Estate_Status_Id")
                        .HasColumnType("text");

                    b.Property<int>("Estate_TypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Estate_Type_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Estate_Year_Built")
                        .HasColumnType("integer");

                    b.Property<int>("Estate_Year_Listed")
                        .HasColumnType("integer");

                    b.Property<decimal>("Floor_Space_Square_Meters")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Is_On_Floor")
                        .HasColumnType("integer");

                    b.Property<string>("Listing_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number_Of_Balconies")
                        .HasColumnType("integer");

                    b.Property<int>("Number_Of_Bathrooms")
                        .HasColumnType("integer");

                    b.Property<int>("Number_Of_Bedrooms")
                        .HasColumnType("integer");

                    b.Property<int>("Number_Of_Garages")
                        .HasColumnType("integer");

                    b.Property<int>("Number_Of_Parking_Spaces")
                        .HasColumnType("integer");

                    b.Property<bool>("Pets_Allowed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Address_Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("Company_Id");

                    b.HasIndex("Employee_Id");

                    b.HasIndex("Estate_TypeId");

                    b.ToTable("Estate");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Estates.Estate_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Type_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Estate_Type");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Address", b =>
                {
                    b.Property<string>("Address_Id")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("MapCoordinates")
                        .HasColumnType("text");

                    b.Property<string>("Neighbourhood")
                        .HasColumnType("text");

                    b.Property<int?>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("Address_Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Agency", b =>
                {
                    b.Property<string>("Agency_Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone_Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Agency_Id");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Agent", b =>
                {
                    b.Property<string>("Agent_Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Agency_Id")
                        .HasColumnType("text");

                    b.Property<string>("Agent_Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Agent_Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Agent_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("ContactId")
                        .HasColumnType("text");

                    b.Property<string>("Contact_Person")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time_Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Agent_Id");

                    b.HasIndex("Agency_Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Comment", b =>
                {
                    b.Property<string>("Comment_Id")
                        .HasColumnType("text");

                    b.Property<string>("Comment_Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comment_Rating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comment_Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date_Posted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Listing_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Comment_Id");

                    b.HasIndex("Listing_Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Company", b =>
                {
                    b.Property<string>("Company_Id")
                        .HasColumnType("text");

                    b.Property<string>("Company_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Company_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Employee_Count")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Company_Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Employee", b =>
                {
                    b.Property<string>("Employee_Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Employee_Id");

                    b.HasIndex("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Listing", b =>
                {
                    b.Property<string>("Listing_Id")
                        .HasColumnType("text");

                    b.Property<string>("Address_Id")
                        .HasColumnType("text");

                    b.Property<string>("Agency_Id")
                        .HasColumnType("text");

                    b.Property<string>("Agent_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Agent_Id1")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Company_Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateBuilt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateListed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("Employee_Id")
                        .HasColumnType("text");

                    b.Property<string>("Estate_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Estate_TypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_From_An_Agency")
                        .HasColumnType("boolean");

                    b.Property<int>("ListingStats_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<double>("PricePerSquareMeter")
                        .HasColumnType("double precision");

                    b.HasKey("Listing_Id");

                    b.HasIndex("Address_Id");

                    b.HasIndex("Agency_Id");

                    b.HasIndex("Agent_Id1");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Company_Id");

                    b.HasIndex("Employee_Id");

                    b.HasIndex("Estate_TypeId");

                    b.HasIndex("ListingStats_Id");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.ListingStats", b =>
                {
                    b.Property<int>("ListingStats_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ListingStats_Id"));

                    b.Property<string>("PriceHistoryId")
                        .HasColumnType("text");

                    b.Property<int>("TimesCommented")
                        .HasColumnType("integer");

                    b.Property<int>("TimesRented")
                        .HasColumnType("integer");

                    b.Property<int>("TimesReported")
                        .HasColumnType("integer");

                    b.Property<int>("TimesReviewed")
                        .HasColumnType("integer");

                    b.Property<int>("TimesSaved")
                        .HasColumnType("integer");

                    b.Property<int>("TimesViewed")
                        .HasColumnType("integer");

                    b.HasKey("ListingStats_Id");

                    b.HasIndex("PriceHistoryId");

                    b.ToTable("ListingStats");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.PriceHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Listing_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Listing_Id")
                        .IsUnique();

                    b.ToTable("PriceHistories");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Review", b =>
                {
                    b.Property<string>("Review_Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date_Posted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Listing_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Listing_Id1")
                        .HasColumnType("text");

                    b.Property<string>("Review_Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Review_Rating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Review_Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Review_Id");

                    b.HasIndex("Listing_Id1");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Clients.Client", b =>
                {
                    b.HasBaseType("RealEstate.Models.Entities.Identity.ApplicationUser");

                    b.Property<string>("Client_Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Client_Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Client_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Client_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contact_Person")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time_Created")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Clients.Client", null)
                        .WithMany("Roles")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Clients.Contact", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Models.Entities.Clients.Client", "Client")
                        .WithOne("Contact")
                        .HasForeignKey("RealEstate.Models.Entities.Clients.Contact", "Client_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Contracts.Contract", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Listings.Agent", null)
                        .WithMany("Contracts")
                        .HasForeignKey("Agent_Id");

                    b.HasOne("RealEstate.Models.Entities.Clients.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Estates.Category", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Estates.Estate", "Estate")
                        .WithMany()
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Estates.City", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Estates.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Estates.Estate", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Listings.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Address_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Models.Entities.Estates.Category", null)
                        .WithMany("Estates")
                        .HasForeignKey("CategoryId");

                    b.HasOne("RealEstate.Models.Entities.Estates.City", "City")
                        .WithMany("Estates")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Models.Entities.Listings.Company", null)
                        .WithMany("Estates")
                        .HasForeignKey("Company_Id");

                    b.HasOne("RealEstate.Models.Entities.Listings.Employee", null)
                        .WithMany("Estates")
                        .HasForeignKey("Employee_Id");

                    b.HasOne("RealEstate.Models.Entities.Estates.Estate_Type", "Estate_Type")
                        .WithMany()
                        .HasForeignKey("Estate_TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Models.Entities.Listings.Listing", "Listing")
                        .WithOne("Estate")
                        .HasForeignKey("RealEstate.Models.Entities.Estates.Estate", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("City");

                    b.Navigation("Estate_Type");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Agent", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Listings.Agency", "Agency")
                        .WithMany("Agents")
                        .HasForeignKey("Agency_Id");

                    b.HasOne("RealEstate.Models.Entities.Clients.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Agency");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Comment", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Listings.Listing", "Listing")
                        .WithMany("Comments")
                        .HasForeignKey("Listing_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Employee", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Listings.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Listing", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Listings.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Address_Id");

                    b.HasOne("RealEstate.Models.Entities.Listings.Agency", null)
                        .WithMany("Listings")
                        .HasForeignKey("Agency_Id");

                    b.HasOne("RealEstate.Models.Entities.Listings.Agent", "Agent")
                        .WithMany("Listings")
                        .HasForeignKey("Agent_Id1");

                    b.HasOne("RealEstate.Models.Entities.Estates.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Models.Entities.Listings.Company", null)
                        .WithMany("Listings")
                        .HasForeignKey("Company_Id");

                    b.HasOne("RealEstate.Models.Entities.Listings.Employee", "Employee")
                        .WithMany("Listings")
                        .HasForeignKey("Employee_Id");

                    b.HasOne("RealEstate.Models.Entities.Estates.Estate_Type", "Estate_Type")
                        .WithMany()
                        .HasForeignKey("Estate_TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Models.Entities.Listings.ListingStats", "ListingStats")
                        .WithMany()
                        .HasForeignKey("ListingStats_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Agent");

                    b.Navigation("Category");

                    b.Navigation("Employee");

                    b.Navigation("Estate_Type");

                    b.Navigation("ListingStats");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.ListingStats", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Listings.PriceHistory", "PriceHistory")
                        .WithMany()
                        .HasForeignKey("PriceHistoryId");

                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.PriceHistory", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Listings.Listing", "Listing")
                        .WithOne("PriceHistory")
                        .HasForeignKey("RealEstate.Models.Entities.Listings.PriceHistory", "Listing_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Review", b =>
                {
                    b.HasOne("RealEstate.Models.Entities.Listings.Listing", "Listing")
                        .WithMany("Reviews")
                        .HasForeignKey("Listing_Id1");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Estates.Category", b =>
                {
                    b.Navigation("Estates");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Estates.City", b =>
                {
                    b.Navigation("Estates");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Estates.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Agency", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Listings");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Agent", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Listings");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Estates");

                    b.Navigation("Listings");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Employee", b =>
                {
                    b.Navigation("Estates");

                    b.Navigation("Listings");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Listings.Listing", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Estate")
                        .IsRequired();

                    b.Navigation("PriceHistory")
                        .IsRequired();

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RealEstate.Models.Entities.Clients.Client", b =>
                {
                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("Contracts");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
